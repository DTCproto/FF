name: BUILD_FFMPEG_BY_MANUAL

on:
  workflow_dispatch:
    inputs:
      helpers_branch:
        description: "指定helpers分支"
        required: true
        default: "master"
        type: choice
        options:
          - "master"
      helpers_commit_id:
        description: "指定helpers使用commit id版本"
        required: true
        default: "HEAD~0"
        type: string
      ffmpeg_branch:
        description: "指定ffmpeg分支"
        required: true
        default: "master"
        type: choice
        options:
          - "master"
      ffmpeg_commit_id:
        description: "指定ffmpeg使用commit id版本"
        required: true
        default: "HEAD~0"
        type: string
      enable_ext_params:
        description: "是否启用ffmpeg自定义扩展编译参数"
        required: true
        default: false
        type: boolean
      ffmpeg_ext_params:
        description: "ffmpeg自定义扩展编译参数"
        required: false
        default: "--enable-libvvenc"
        type: string
      release_archives:
        description: "enable release archives"
        default: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [win64]
    steps:
      - uses: actions/checkout@v4

      - name: Install APT dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: git ragel curl texinfo g++ ed bison flex cvs yasm automake libtool autoconf gcc cmake git make pkg-config zlib1g-dev unzip pax nasm gperf autogen bzip2 autoconf-archive p7zip-full meson clang python3-distutils python-is-python3

      - name: Install pip dependencies
        run: sudo -H pip3 -qq install meson ninja

      - name: git clone helpers
        run: |
          mkdir -p ${{ github.workspace }}/build
          cd ${{ github.workspace }}/build
          git clone -b ${{ inputs.helpers_branch }} https://github.com/rdp/ffmpeg-windows-build-helpers.git
          cd ${{ github.workspace }}/build/ffmpeg-windows-build-helpers
          git reset --hard ${{ inputs.helpers_commit_id }}

      - name: git clone FFmpeg
        run: |
          mkdir -p ${{ github.workspace }}/build
          cd ${{ github.workspace }}/build
          git clone -b ${{ inputs.ffmpeg_branch }} https://github.com/FFmpeg/FFmpeg.git
          cd ${{ github.workspace }}/build/FFmpeg
          git reset --hard ${{ inputs.ffmpeg_commit_id }}
          echo "ffmpeg_short_version=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"

      - name: add ffmpeg ext build params
        if: ${{ inputs.enable_ext_params }}
        run: |
          cat ${{ github.workspace }}/ext/cross_compile_ffmpeg.sh > ${{ github.workspace }}/build/ffmpeg-windows-build-helpers/cross_compile_ffmpeg.sh
          sed -i 's/--enable-libaom/--enable-libaom ${{ inputs.ffmpeg_ext_params }}/g' ${{ github.workspace }}/build/ffmpeg-windows-build-helpers/cross_compile_ffmpeg.sh

      - name: build ffmpeg
        run: |
          cd ${{ github.workspace }}/build/ffmpeg-windows-build-helpers
          ./cross_compile_ffmpeg.sh --ffmpeg-source-dir=${{ github.workspace }}/build/FFmpeg \
          --gcc-cpu-count=$(nproc) --sandbox-ok=y --build-ffmpeg-static=y \
          --disable-nonfree=n \
          --build-intel-qsv=y --build-amd-amf=y \
          --compiler-flavors=${{ matrix.os }}

      - name: show build result files
        run: |
          ls -R ${{ github.workspace }}/build/FFmpeg/*.exe

      - name: 7-Zip FFmpeg binaries
        run: |
          7z a -mx9 ${{ github.workspace }}/temp/ffmpeg-bin-${{ matrix.os }}-${{ env.ffmpeg_short_version }}-nonfree.7z ${{ github.workspace }}/build/FFmpeg/*.exe

      - name: show zip files
        run: |
          ls -R ${{ github.workspace }}/temp

      - name: Upload FFmpeg binaries
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-bin-${{ matrix.os }}-${{ env.ffmpeg_short_version }}-nonfree
          compression-level: 9
          path: |
            ${{ github.workspace }}/temp/*
          if-no-files-found: error

  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download FFmpeg archives
        uses: actions/download-artifact@v4
        with:
          pattern: ffmpeg-bin-*
          merge-multiple: true
          path: ${{ github.workspace }}/archives
      
      - name: show zip files
        run: |
          ls -R ${{ github.workspace }}/archives

      - name: Get current date time
        run: |
          echo "current_date_time=$(date +'%Y-%m-%d-%H-%M')" >> "$GITHUB_ENV"

      - name: Release FFmpeg archives
        uses: softprops/action-gh-release@v2
        if: ${{ inputs.release_archives }}
        with:
          tag_name: "V-${{ env.current_date_time }}"
          name: "V-${{ env.current_date_time }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          body: "FFmpeg nonfree build result."
          files: |
            ${{ github.workspace }}/archives/**
